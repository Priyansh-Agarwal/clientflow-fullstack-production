name: CI
on:
  push: { branches: [main] }
  pull_request:
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-test:
    runs-on: ubuntu-latest
    needs: [security-scan, secret-scan]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      
      - name: Install dependencies
        run: pnpm i
      
      - name: Type check
        run: pnpm --filter api-server typecheck
      
      - name: Lint code
        run: pnpm --filter api-server lint || echo "Linting not configured yet"
      
      - name: Run unit tests
        run: pnpm --filter api-server test:unit
      
      - name: Run integration tests
        run: pnpm --filter api-server test:integration
        env:
          API_URL: http://localhost:4000
          TEST_ORG_ID: test-org-123
          TEST_BUSINESS_ID: test-business-123
      
      - name: Run database migrations
        run: pnpm --filter api-server run migrate
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      
      - name: Run smoke tests
        run: pnpm --filter api-server smoke:production
        env:
          API_URL: http://localhost:4000
          TEST_ORG_ID: test-org-123
      
      - name: Security audit
        run: pnpm audit --audit-level moderate
      
      - name: Check for outdated packages
        run: pnpm outdated || echo "Some packages are outdated"

  production-deploy:
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with: { version: 9 }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: 'pnpm' }
      
      - name: Install dependencies
        run: pnpm i
      
      - name: Deploy to production
        run: pnpm --filter api-server deploy:production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}